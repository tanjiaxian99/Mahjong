using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;
using Photon.Realtime;
using Hashtable = ExitGames.Client.Photon.Hashtable;

public class PropertiesManager : MonoBehaviourPunCallbacks {

    #region MonoBehaviour References

    [SerializeField]
    private GameObject scriptManager;

    private GameManager gameManager;

    private PlayerManager playerManager;

    private TilesManager tilesManager;

    private Payment payment;

    private WinManager winManager;

    #endregion

    #region PropKeys

    /// <summary>
    /// The password for the current room
    /// </summary>
    public static readonly string RoomPasswordPropKey = "rp";

    /// <summary>
    /// A dictionary containing the ready-state of players
    /// </summary>
    public static readonly string PlayerReadyPropKey = "pr";

    /// <summary>
    /// The current turn
    /// </summary>
    public static readonly string TurnNumberPropKey = "tn";

    /// <summary>
    /// Dictionary containing actor numbers and wind assignments
    /// </summary>
    public static readonly string WindAllocationPropKey = "wa";

    /// <summary>
    /// SeatWind of the local player in the current round.
    /// </summary>
    // TODO: Not used at the moment.
    public static readonly string SeatWindPropKey = "sw";

    /// <summary>
    /// The prevailing wind of the current round
    /// </summary>
    public static readonly string PrevailingWindPropKey = "pv";

    /// <summary>
    /// The first play order generated by MasterClient.
    /// </summary>
    public static readonly string InitialPlayOrderPropKey = "ip";

    /// <summary>
    /// Play order sequence for the current round
    /// </summary>
    public static readonly string PlayOrderPropkey = "po";

    /// <summary>
    /// The number of points a player has
    /// </summary>
    public static readonly string PlayerPointsPropKey = "pp";

    /// <summary>
    /// A boolean affecting whether a player can touch his/her hand tiles
    /// </summary>
    public static readonly string TouchTilesPropKey = "TT";

    /// <summary>
    /// List of tiles in the walls
    /// </summary>
    public static readonly string WallTileListPropKey = "wt";

    /// <summary>
    /// The discarder's actor number, the tile discarded, and the discard position
    /// </summary>
    public static readonly string DiscardTilePropKey = "dt";

    /// <summary>
    /// The latest tile which was Konged
    /// </summary>
    public static readonly string SpecialTilePropKey = "kt";

    /// <summary>
    /// The type of the tile that could be used for winning, ranging from Normal to Kong to Bonus
    /// </summary>
    public static readonly string TileTypePropKey = "tt";

    /// <summary>
    /// Number of tiles in the player's hand
    /// </summary>
    public static readonly string HandTilesCountPropKey = "ht";

    /// <summary>
    /// The local player's hand tiles
    /// </summary>
    public static readonly string OpenHandPropKey = "oh";

    /// <summary>
    /// The local player's open tiles
    /// </summary>
    public static readonly string OpenTilesPropKey = "ot";

    /// <summary>
    /// The next player to play
    /// </summary>
    public static readonly string NextPlayerPropKey = "np";

    /// <summary>
    /// The player that has to pay for all players
    /// </summary>
    public static readonly string PayAllPlayerPropKey = "pa";

    #endregion

    private void Start() {
        gameManager = scriptManager.GetComponent<GameManager>();
        playerManager = scriptManager.GetComponent<PlayerManager>();
        tilesManager = scriptManager.GetComponent<TilesManager>();
        payment = scriptManager.GetComponent<Payment>();
        winManager = scriptManager.GetComponent<WinManager>();
    }

    #region Set Properties Methods

    public static Hashtable SetRoomPassword(string password) {
        Hashtable ht = new Hashtable();
        ht.Add(RoomPasswordPropKey, password);
        return ht;
    }

    public static void SetPlayerReadyDict(Player player) {
        Dictionary<int, bool> readyDict = GetPlayerReadyDict();
        if (readyDict == null) {
            readyDict = new Dictionary<int, bool>();
        }

        if (!readyDict.ContainsKey(player.ActorNumber)) {
            readyDict.Add(player.ActorNumber, true);
        }

        readyDict[player.ActorNumber] = !readyDict[player.ActorNumber];

        Hashtable ht = new Hashtable();
        ht.Add(PlayerReadyPropKey, readyDict);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void SetTurnNumber(int turn) {
        Hashtable ht = new Hashtable();
        ht.Add(TurnNumberPropKey, turn);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void StartTurn() {
        SetTurnNumber(GetCurrentTurn() + 1);
    }

    public static void SetWindAllocation(Dictionary<int, int> windsAllocation) {
        Hashtable ht = new Hashtable();
        ht.Add(WindAllocationPropKey, windsAllocation);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }
    
    public static void SetSeatWind(PlayerManager.Wind wind) {
        Hashtable ht = new Hashtable();
        ht.Add(SeatWindPropKey, wind);
        PhotonNetwork.SetPlayerCustomProperties(ht);
    }

    public static void SetPrevailingWind(PlayerManager.Wind wind) {
        Hashtable ht = new Hashtable();
        ht.Add(PrevailingWindPropKey, wind);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void SetInitialPlayerOrder(Player[] playOrder) {
        Hashtable ht = new Hashtable();
        ht.Add(InitialPlayOrderPropKey, playOrder);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void SetPlayOrder(Player[] playOrder) {
        Hashtable ht = new Hashtable();
        ht.Add(PlayOrderPropkey, playOrder);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void SetPlayerPoints(int points) {
        Hashtable ht = new Hashtable();
        ht.Add(PlayerPointsPropKey, points);
        PhotonNetwork.SetPlayerCustomProperties(ht);
    }

    public static void SetTouchTiles(bool canTouch) {
        Hashtable ht = new Hashtable();
        ht.Add(TouchTilesPropKey, canTouch);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void SetWallTileList(List<Tile> tiles) {
        Hashtable ht = new Hashtable();
        ht.Add(WallTileListPropKey, tiles);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void SetDiscardTile(Tuple<int, Tile, float> tuple) {
        Hashtable ht = new Hashtable();
        ht.Add(DiscardTilePropKey, tuple);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void SetSpecialTile(Tuple<int, Tile, float> tuple) {
        Hashtable ht = new Hashtable();
        ht.Add(SpecialTilePropKey, tuple);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void SetTileType(string type) {
        Hashtable ht = new Hashtable();
        ht.Add(TileTypePropKey, type);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void SetHandTilesCount(int handTilesCount) {
        Hashtable ht = new Hashtable();
        ht.Add(HandTilesCountPropKey, handTilesCount);
        PhotonNetwork.SetPlayerCustomProperties(ht);
    }

    public static void SetOpenHand(List<Tile> hand) {
        Hashtable ht = new Hashtable();
        ht.Add(OpenHandPropKey, hand);
        PhotonNetwork.SetPlayerCustomProperties(ht);
    }

    public static void SetOpenTiles(List<Tile> openTiles) {
        Hashtable ht = new Hashtable();
        ht.Add(OpenTilesPropKey, openTiles);
        PhotonNetwork.SetPlayerCustomProperties(ht);
    }

    public static void SetNextPlayer(Player player) {
        Hashtable ht = new Hashtable();
        ht.Add(NextPlayerPropKey, player);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    public static void SetPayAllPlayer(Player discardPlayer) {
        Hashtable ht = new Hashtable();
        ht.Add(PayAllPlayerPropKey, discardPlayer);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }    

    #endregion

    #region Retrieve Properties Methods

    public static string GetRoomPassword(RoomInfo roomInfo) {
        return (string)roomInfo.CustomProperties[RoomPasswordPropKey];
    }

    public static Dictionary<int, bool> GetPlayerReadyDict() {
        return (Dictionary<int, bool>)PhotonNetwork.CurrentRoom.CustomProperties[PlayerReadyPropKey];
    }

    public static int GetCurrentTurn() {
        return (int)PhotonNetwork.CurrentRoom.CustomProperties[TurnNumberPropKey];
    }

    public static Dictionary<int, int> GetWindAllocation() {
        return (Dictionary<int, int>)PhotonNetwork.CurrentRoom.CustomProperties[WindAllocationPropKey];
    }

    public static PlayerManager.Wind GetPrevailingWind() {
        return (PlayerManager.Wind)PhotonNetwork.CurrentRoom.CustomProperties[PrevailingWindPropKey];
    }

    public static Player[] GetInitialPlayOrder() {
        return (Player[])PhotonNetwork.CurrentRoom.CustomProperties[InitialPlayOrderPropKey];
    }

    public static Player[] GetPlayOrder() {
        return (Player[])PhotonNetwork.CurrentRoom.CustomProperties[PlayOrderPropkey];
    }

    public static int GetPlayerPoints(Player player) {
        return (int)player.CustomProperties[PlayerPointsPropKey];
    }

    public static bool GetTouchTiles() {
        return (bool)PhotonNetwork.CurrentRoom.CustomProperties[TouchTilesPropKey];
    }

    public static List<Tile> GetWallTileList() {
        return (List<Tile>)PhotonNetwork.CurrentRoom.CustomProperties[WallTileListPropKey];
    }

    public static Tuple<int, Tile, float> GetDiscardTile() {
        return (Tuple<int, Tile, float>)PhotonNetwork.CurrentRoom.CustomProperties[DiscardTilePropKey];
    }

    public static Tuple<int, Tile, float> GetSpecialTile() {
        return (Tuple<int, Tile, float>)PhotonNetwork.CurrentRoom.CustomProperties[SpecialTilePropKey];
    }

    public static string GetTileType() {
        return (string)PhotonNetwork.CurrentRoom.CustomProperties[TileTypePropKey];
    }

    public static int GetHandTilesCount(Player player) {
        return (int)player.CustomProperties[HandTilesCountPropKey];
    }

    public static List<Tile> GetOpenHand(Player player) {
        return (List<Tile>)player.CustomProperties[OpenHandPropKey];
    }

    public static List<Tile> GetOpenTiles(Player player) {
        return (List<Tile>)player.CustomProperties[OpenTilesPropKey];
    }

    public static Player GetNextPlayer() {
        return (Player)PhotonNetwork.CurrentRoom.CustomProperties[NextPlayerPropKey];
    }

    public static Player GetPayAllPlayer() {
        return (Player)PhotonNetwork.CurrentRoom.CustomProperties[PayAllPlayerPropKey];
    }

    public static Tile GetWinningTile(Player player) {
        List<Tile> openHand = (List<Tile>)player.CustomProperties[OpenHandPropKey];
        return (Tile)openHand[openHand.Count - 1];
    }

    #endregion

    public static void RemovePlayerReady(Player player) {
        Dictionary<int, bool> readyDict = GetPlayerReadyDict();

        if (readyDict == null) {
            return;
        }

        readyDict.Remove(player.ActorNumber);

        Hashtable ht = new Hashtable();
        ht.Add(PlayerReadyPropKey, readyDict);
        PhotonNetwork.CurrentRoom.SetCustomProperties(ht);
    }

    #region Properties Update

    public override void OnRoomPropertiesUpdate(Hashtable propertiesThatChanged) {
        if (propertiesThatChanged.ContainsKey(TurnNumberPropKey)) {
            gameManager.turn = GetCurrentTurn();

        } else if (propertiesThatChanged.ContainsKey(WindAllocationPropKey)) {
            DictManager.Instance.windsAllocation = GetWindAllocation();
            gameManager.windsDict = GetWindAllocation();
            PlayerManager.Wind wind = (PlayerManager.Wind)gameManager.windsDict[PhotonNetwork.LocalPlayer.ActorNumber];

            SetSeatWind(wind);
            playerManager.seatWind = wind;
            LocalizeSeatWind.Instance.SeatWind = wind.ToString();
            Debug.LogFormat("The player's wind is {0}", playerManager.seatWind);
            // DEBUG
            PhotonNetwork.NickName = "Player" + (int)playerManager.seatWind;

            // Initialize Instant Payment dictionary
            this.payment.InitializeInstantPaymentDict(PhotonNetwork.PlayerList.ToList());

        } else if (propertiesThatChanged.ContainsKey(PrevailingWindPropKey)) {
            gameManager.prevailingWind = GetPrevailingWind();
            LocalizePrevailingWind.Instance.PrevailingWind = gameManager.prevailingWind.ToString();
            Debug.LogFormat("The prevailing wind is {0}", gameManager.prevailingWind);

        } else if (propertiesThatChanged.ContainsKey(TouchTilesPropKey)) {
            playerManager.canTouchHandTiles = GetTouchTiles();

        } else if (propertiesThatChanged.ContainsKey(WallTileListPropKey)) {
            gameManager.numberOfTilesLeft = GetWallTileList().Count;
            LocalizeTilesLeft.Instance.TilesLeft = gameManager.numberOfTilesLeft;

        } else if (propertiesThatChanged.ContainsKey(DiscardTilePropKey)) {
            Tuple<int, Tile, float> discardTileInfo = GetDiscardTile();

            // Item1 == -1 when the latest discard tile is to be removed, due to Chow, Pong, Kong or Win
            // Item1 == -2 when a player has drawn a tile and both discardPlayer and latestDiscardTile can be reset to null;
            if (discardTileInfo.Item1 == -1) {
                // Remove the latest discard tile
                GameObject lastDiscardTile = GameObject.FindGameObjectWithTag("Discard");
                Destroy(lastDiscardTile);
                gameManager.discardTiles.RemoveAt(gameManager.discardTiles.Count - 1);
                return;

            } else if (discardTileInfo.Item1 == -2) {
                gameManager.discardPlayer = null;
                gameManager.latestDiscardTile = null;
                return;
            }

            gameManager.discardPlayer = PhotonNetwork.CurrentRoom.GetPlayer(discardTileInfo.Item1);
            gameManager.latestDiscardTile = discardTileInfo.Item2;
            float hPos = discardTileInfo.Item3;

            gameManager.isFreshTile = FreshTileDiscard.IsFreshTile(gameManager.discardTiles, gameManager.AllPlayersOpenTiles(), gameManager.latestDiscardTile);
            gameManager.discardTiles.Add(gameManager.latestDiscardTile);

            if (PhotonNetwork.IsMasterClient) {
                SetTileType("Normal");
            }

            // Only instantiate the tile if a remote player threw it
            if (gameManager.discardPlayer != PhotonNetwork.LocalPlayer) {
                RemotePlayer.InstantiateRemoteDiscardTile(gameManager, gameManager.discardPlayer, gameManager.latestDiscardTile, hPos);
            }

        } else if (propertiesThatChanged.ContainsKey(SpecialTilePropKey)) {
            Tuple<int, Tile, float> discardTileInfo = GetSpecialTile();

            if (discardTileInfo.Item3 == -100 && PhotonNetwork.CurrentRoom.GetPlayer(discardTileInfo.Item1) == PhotonNetwork.LocalPlayer) {
                // Remove the lastest Bonus/Kong Tile
                Tile tile = discardTileInfo.Item2;
                if (tile.suit == Tile.Suit.Season || tile.suit == Tile.Suit.Flower) {
                    tilesManager.bonusTiles.Remove(tile);
                    playerManager.InstantiateLocalOpenTiles();
                    return;
                } else {
                    for (int i = 0; i < tilesManager.comboTiles.Count; i++) {
                        if (tilesManager.comboTiles[i].Contains(tile)) {
                            tilesManager.comboTiles[i].Remove(tile);
                            playerManager.InstantiateLocalOpenTiles();
                            return;
                        }
                    }
                }

            } else if (discardTileInfo.Item3 == 1) {
                gameManager.bonusPlayer = PhotonNetwork.CurrentRoom.GetPlayer(discardTileInfo.Item1);
                gameManager.latestBonusTile = discardTileInfo.Item2;
                if (PhotonNetwork.IsMasterClient) {
                    SetTileType("Bonus");
                }

            } else if (discardTileInfo.Item3 == 2) {
                gameManager.kongPlayer = PhotonNetwork.CurrentRoom.GetPlayer(discardTileInfo.Item1);
                gameManager.latestKongTile = discardTileInfo.Item2;

                if (PhotonNetwork.IsMasterClient) {
                    SetTileType("Exposed Kong");
                }

            } else if (discardTileInfo.Item3 == 3) {
                gameManager.kongPlayer = PhotonNetwork.CurrentRoom.GetPlayer(discardTileInfo.Item1);
                gameManager.latestKongTile = discardTileInfo.Item2;
                
                if (PhotonNetwork.IsMasterClient) {
                    SetTileType("Concealed Kong");
                }
            }

        } else if (propertiesThatChanged.ContainsKey(TileTypePropKey)) {
            if (PhotonNetwork.IsMasterClient) {
                EventsManager.EventWinUpdate("Start Win Check");
            }

        } else if (propertiesThatChanged.ContainsKey(PayAllPlayerPropKey)) {
            Player player = GetPayAllPlayer();
            gameManager.payAllPlayer = player;
            if (player == PhotonNetwork.LocalPlayer) {
                playerManager.payForAll = "Local";
            } else {
                playerManager.payForAll = "Remote";
            }
        }
    }


    /// <summary>
    /// Called when a remote player's hand or open tiles changes
    /// </summary>
    public override void OnPlayerPropertiesUpdate(Player targetPlayer, Hashtable changedProps) {
        if (changedProps.ContainsKey(PlayerPointsPropKey)) {
            InfoPanel.Instance.SetPlayerPoints(targetPlayer, GetPlayerPoints(targetPlayer));

        } else if (changedProps.ContainsKey(HandTilesCountPropKey) && targetPlayer != PhotonNetwork.LocalPlayer) {
            RemotePlayer.InstantiateRemoteHand(gameManager, targetPlayer);

        } else if (changedProps.ContainsKey(OpenHandPropKey) && targetPlayer != PhotonNetwork.LocalPlayer) {
            RemotePlayer.InstantiateRemoteOpenHand(gameManager, targetPlayer);

        } else if (changedProps.ContainsKey(OpenTilesPropKey) && targetPlayer != PhotonNetwork.LocalPlayer) {
            RemotePlayer.InstantiateRemoteOpenTiles(gameManager, payment, targetPlayer);
        }
    }

    #endregion
}
